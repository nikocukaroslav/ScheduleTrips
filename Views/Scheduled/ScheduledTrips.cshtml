<style>
    body {
        overflow: hidden;
    }

    .scheduleTripsPage {
        display: grid;
        grid-template-columns: 1fr 10fr;
    }

    .newScheduledTrip {
        background-color: darkgray;
        width: 3rem;
        height: 3rem;
        color: #242424;
        border-radius: 50%;
        transition: all 0.2s;
        display: flex;
        justify-content: center;
        align-items: center;
        border: 1px solid #555;
    }

    .newScheduledTrip:hover {
        background-color: #e3fafc;
    }

    .plus {
        height: 1.8rem;
    }

    .scheduledTripsList {
        padding: 0 0.8rem 0.8rem 0.8rem;
        display: flex;
        list-style: none;
        flex-direction: column;
        gap: 0.8rem;
        max-height: 82vh;
    }

    .place {
        width: 20rem;
        height: 5rem;
        background-color: darkgray;
        color: #242424;
        padding: 1.2rem;
        display: flex;
        align-items: center;
        font-size: 1.8rem;
        font-weight: 600;
        border-radius: 6px;
        transition: all 0.2s;
        justify-content: space-between;
        position: relative;
        line-height: 1.1;
    }

    .place:hover {
        background-color: #e3fafc;
    }

    .active {
        background-color: #e3fafc;
    }

    .firstHeader {
        width: 20rem;
        height: 6rem;
        background-color: darkgray;
        color: #242424;
        padding: 1.2rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 1.8rem;
        font-weight: 600;
        margin: 0.8rem;
        border-radius: 6px;
    }

    .scheduledTripsNav {
        display: flex;
        margin: 0.8rem;
        gap: 0.8rem;
    }

    .scheduledTripsNav h3 {
        width: 100%;
        color: #ddd;
        display: flex;
        align-items: center;
        justify-content: center;
        height: 6rem;
        background-color: #333;
        border: 3px solid #333;
        border-radius: 6px;
        transition: all 0.2s;
    }

    .scheduledTripsNav h3:hover {
        background-color: #242424;
    }

    .purposes {
        margin: 0.8rem;
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 0.8rem;
    }

    .todoList {
        display: flex;
        flex-direction: column;
        gap: 1.2rem;
    }
    
    label {
        display: flex;
        gap: 0.6rem;
    }

    .map {
        margin: 0 0.8rem;
        border-radius: 6px;
        width: 100%;
        height: 82vh;
        border: none;
    }

    .completed {
        color: darkgray;
        text-decoration: line-through;
    }

    .dateTime {
        font-size: 1.6rem;
    }

    .noTrips {
        padding: 1.2rem;
        text-align: center;
    }

    .noTripsMain {
        font-weight: bold;
        font-size: 1.8rem;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .past {
        background-color: gray;
        color: #555;
    }

    .editScheduledTrip {
        display: flex;
        align-items: center;
        justify-content: center;
        position: absolute;
        cursor: pointer;
        left: 19rem;
        padding: 1.2rem;
    }

    .edit {
        height: 1.6rem;
        fill: #ddd;
    }

    form {
        height: 70rem;
        width: 100%;
        display: flex;
        gap: 1.2rem;
        flex-direction: column;
        border-radius: 6px;
        padding: 0.8rem;
        border: 3px solid #333;
    }
    
    .button{
        margin-top: auto;
    }
</style>

@using CloudinaryDotNet.Core
@model Save__plan_your_trips.Models.ViewModels.ScheduledTripsPageViewModel

<section class="scheduleTripsPage">
    <section>
        <header class="firstHeader">
            <span>Scheduled trips</span>
            <a class="newScheduledTrip" asp-controller="Scheduled" asp-action="AddScheduledTripName">
                <svg xmlns="http://www.w3.org/2000/svg"
                     fill="currentColor"
                     class="plus"
                     viewBox="0 0 16 16">
                    <path fillRule="evenodd"
                          d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2"/>
                </svg>
            </a>
        </header>
        <ul class="scheduledTripsList">
            @if (Model.ScheduledTrips.Any())
            {
                foreach (var item in Model.ScheduledTrips.Reverse())
                {
                    <li class="@(item.DateTime < DateTime.Now ? "past" : "") place" data-scheduledTrip-id="@item.Id">
                        @item.Name
                        <time class="dateTime">@item.DateTime.ToShortDateString()</time>
                        <a class="editScheduledTrip" asp-action="EditScheduledTrip" asp-controller="Scheduled"
                           asp-route-id="@item.Id">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="edit" viewBox="0 0 16 16">
                                <path
                                    d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z"/>
                                <path fill-rule="evenodd"
                                      d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5z"/>
                            </svg>
                        </a>
                    </li>
                }
            }
            else
            {
                <p class="noTrips">No scheduled trips yet</p>
            }
        </ul>
    </section>
    @if (Model.ToDos.Any())
    {
        <main>
            <nav class="scheduledTripsNav">
                <h3 class="todoHeader">Purposes</h3>
                <h3 class="mapHeader">Marshoot</h3>
            </nav>
            <section class="purposes">
                <form method="post" asp-action="SortTodo" asp-controller="Scheduled">
                    <div class="todoList">
                        <h4>Planed to do</h4>
                        @for (int i = 0; i < Model.ToDos.Count; i++)
                        {
                            @if (!Model.ToDos[i].IsPerformed)
                            {
                                <label>
                                    <input type="checkbox" class="todo"
                                           data-scheduledTrip-id="@Model.ToDos[i].ScheduledTripId"
                                           asp-for="@Model.PerformToDoRequests[i].IsPerformed"/>
                                    <input type="hidden" asp-for="@Model.PerformToDoRequests[i].Id" value="@Model.ToDos[i].Id"/>
                                    <span>@Model.ToDos[i].Task</span>
                                </label>
                            }
                        }
                    </div>
                    <button type="submit" class="button" asp-action="SortTodo"
                            asp-controller="Scheduled">
                        Add to performed
                    </button>
                </form>
                <form method="post" asp-action="SortTodo" asp-controller="Scheduled">
                    <div class="performed todoList">
                        <h4>Performed</h4>
                        @for (int i = 0; i < Model.ToDos.Count; i++)
                        {
                            @if (Model.ToDos[i].IsPerformed)
                            {
                                <label class="@(Model.ToDos[i].IsPerformed ? "completed" : "")">

                                    <input type="checkbox" class="todo"
                                           data-scheduledTrip-id="@Model.ToDos[i].ScheduledTripId"
                                           asp-for="@Model.ToDos[i].IsPerformed"
                                           />
                                    

                                    <input type="hidden" asp-for="@Model.PerformToDoRequests[i].Id" value="@Model.ToDos[i].Id"/>
                                    <span>@Model.ToDos[i].Task</span>
                                </label>
                            }
                        }
                    </div>
                    <button type="submit" class="button" asp-action="SortTodo" asp-controller="Scheduled">Remove from performed</button>
                </form>
            </section>
            <section class="mapPage">
                <iframe class="map"
                        src="https://www.google.com/maps/embed?pb=!1m14!1m12!1m3!1d40812.351682017834!2d28.6829387!3d50.25884285!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!5e0!3m2!1sru!2sua!4v1712906141139!5m2!1sru!2sua"
                        allowfullscreen loading="lazy" referrerpolicy="no-referrer-when-downgrade">
                </iframe>
            </section>
        </main>
    }
    else
    {
        <p class="noTripsMain"> Start from scheduling your first trip!</p>
    }
</section>

@section Scripts
{
    <script>
    document.addEventListener("DOMContentLoaded", function () {
        const todos = document.querySelectorAll(".todo");
        const places = document.querySelectorAll(".place")
        const mapPage = document.querySelector(".mapPage");
        const purposesPage = document.querySelector(".purposes");
        const todoHeader = document.querySelector(".todoHeader");
        const mapHeader = document.querySelector(".mapHeader");
        const newScheduledTrip = document.querySelector(".newScheduledTrip");

        mapPage.style.display = "none"
        
        places.forEach(place => {
            place.addEventListener("click", function () {
                const placeId = this.getAttribute('data-scheduledTrip-id');
                const activePlaceId = this.dataset.scheduledTripId;
                
                places.forEach((p) => {
                    p.classList.remove("active");
                });
              place.classList.add("active")

                todos.forEach((todo) => {
                    if (todo.getAttribute('data-scheduledTrip-id') === placeId) {
                        todo.parentElement.style.display = "flex";
                    } else {
                        todo.parentElement.style.display = "none";
                    }
                });
                localStorage.setItem("activePlaceId", placeId);
            });
        });
        
        const activePlaceId = localStorage.getItem("activePlaceId");

        if (activePlaceId) {
            const activePlace = document.querySelector(`.place[data-scheduledTrip-id="${activePlaceId}"]`);
            if (activePlace) activePlace.click();
        } else if (places.length > 0) {
            places[0].click();
        }
        
        places.forEach(place => {
            const editScheduledTrip = place.querySelector(".editScheduledTrip");

            editScheduledTrip.style.display = "none"

            place.addEventListener("mouseover", function () {
                editScheduledTrip.style.display = "flex";
            });

            place.addEventListener("mouseout", function () {
                editScheduledTrip.style.display = "none";
            });
        });


        mapHeader.addEventListener("click", function () {
            newScheduledTrip.style.display = "none"
            mapPage.style.display = "block"
            mapHeader.style.backgroundColor = "#242424"
            todoHeader.style.backgroundColor = "#333"
            purposesPage.style.display = "none"
        })

        todoHeader.addEventListener("click", function () {
            newScheduledTrip.style.display = "flex"
            mapPage.style.display = "none"
            mapHeader.style.backgroundColor = "#333"
            todoHeader.style.backgroundColor = "#242424"
            purposesPage.style.display = "grid"
        })

        todoHeader.click();
    })

</script>
}